@page "/game"
@using Microsoft.AspNetCore.SignalR.Client
@using Model
@using Newtonsoft.Json

@inject NavigationManager Nav
@inject IJSRuntime JS

<PageTitle>@Title</PageTitle>

@if(PlayingChar != ' ') {
    <div class="playing_char">You're playing: @PlayingChar</div>
}

<div class="field">
@if(Board is not null) {
    @for(int x = 0; x < Board.GetLength(0); x++) {
        for(int y = 0; y < Board.GetLength(1); y++) {
            <TTTSquare X="x" Y="y" Site="this" />
        }
        <br />
    }
}
</div>

@if(!string.IsNullOrEmpty(WinnerMessage)) {
    <div class="winner">@WinnerMessage</div> 
}

@if(!GameBegin) {
    <ClipboardCopy Text="@InvitationLinkText" ToCopy="@InvitationLink" />
}

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string Id { get; set; }
    
    public string Title { get { return $"Playing Game: {Id}"; } }
    public string InvitationLinkText { get { return $"Invite your friends: {InvitationLink}"; } }
    public string InvitationLink { get { return $"{Nav.BaseUri}game?id={Id}"; } }

    public HubConnection Hub { get; private set; }

    public string WinnerMessage { get; private set; }

    public char[,] Board { get; private set; }
    char PlayingChar { get; set; } = ' ';

    public bool IsCurrentMover { get; set; }
    public bool GameBegin { get; set; }

    protected override async Task OnInitializedAsync() {
        Hub = new HubConnectionBuilder().WithUrl("https://localhost:44381/hub/game").Build();
        Hub.On<string>("Error", Error);
        Hub.On<string>("GetGame", GetGame);
        Hub.On<string>("Winner", Winner);
        Hub.On<bool>("SetMover", SetMover);
        Hub.On<char>("SetChar", SetChar);
        await Hub.StartAsync();

        await Hub.SendAsync("JoinGame", Id);
    }

    void Winner(string message) {
        WinnerMessage = message;
        IsCurrentMover = false;
        StateHasChanged();
    }

    void SetChar(char sign) =>
        PlayingChar = sign;

    void SetMover(bool mover) =>
        IsCurrentMover = mover;

    void GetGame(string json) {
        GameBegin = true;
        Board = JsonConvert.DeserializeObject<char[,]>(json);
        StateHasChanged(); 
    }

    public async void SendMove(int x, int y) =>
        await Hub.SendAsync("CheckMove", Id, x, y);

    async void Error(string message) =>
        await JS.InvokeVoidAsync("alert", message);
}
